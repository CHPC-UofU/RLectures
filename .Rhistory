xpy <- x^y
xpy
length(x)
sum(x)
prod(x[-4])
# Length function + recycling
x <- 0:10
y <- 1:2
length(x)
length(y)
x
y
x+y
x <- seq(2,100,by=15)
y <- seq(0,100,by=10)
x
y
x>45
x[x>45]
any(x<y)
all(x[6:7]>y[2:3])
x[4:6]
w
w[c(1,3,5,7)]
a <- c(x,w)   # Appending vector  to vector
a
# '-' : Exclude elements
x
x[-c(2,4,6)]
x
y <- c(13,24,75,33,89,91,102,115)
y
z <- y[-1] - y[-length(y)]
z
# C. Vector & Hash Table:
# ----------------------
jobtype <- c("clerk","baker","barrista","electrician","plumber")
firstname <- c("John","Gill","Cedar","Marie","Joe")
jobtype
firstname
# Check whether names are set.
names(jobtype) <- firstname
jobtype
job1 <- jobtype[3]
job1
job2 <- jobtype["Marie"]
job2
# Remove names from the vector
names(jobtype) <- NULL
jobtype
# D. NULL & NA:
# ------------
#
v <- c(1:5,NA,7,NA,9)
mean(v)
job1
# D. NULL & NA:
# ------------
#
v <- c(1:5,NA,7,NA,9)
mean(v)
is.na(v)
mean(v,na.rm=TRUE)
v <- c(1:5,NULL,7,NULL,9)
mean(v)
is.null(v)
# E.which/in operator /match:
# --------------------------
x <- 1:10
# NOTE on the boolean operators (AND , OR):
# ----------------------------------------
x <- 5
y <- 6
x < 10 && x>0     # Combinations of simple atomic units
x < 0 || x > 10   # Comb. of simple atomic units
a <- c(T,F,T,F,F)
b <- c(F,F,T,F,T)
a
b
a | b  # Element-wise comparison
a & b  # Element-wise comparison
# Clean up variables from the env.
rm(list=ls())
# a.Creation using the matrix() function:
# --------------------------------------
A <- matrix(1:10,nrow=2)
A           # DEFAULT: column-major storage : Sounds like FORTRAN
B <- matrix(1:10, nrow=2 , byrow=TRUE)
B
# Make sire nrow*ncol = nel
C <- matrix(data=c(2,3,893,0.17),nrow=2,ncol=2)
C
D <- matrix(nrow=2,ncol=3)
D[1,1] = 1.
D[1,2] = 2.
D[1,3] = 3.
D[2,1] = 4.
D[2,2] = 5.
D[2,3] = 6.
D
D[,2]
D[2,]
# b.Creation using rbind/cbind:
# ----------------------------
# rbind: Row Bind
W <- rbind(1:10,11:20)
W
class(W)
# cbind: Column Bind
Z<- cbind(1:5,6:10,11:15)
Z
class(Z)
# a.Indices:
# ---------
B
B[1,2]
B[2,]
B[,2]
B[,c(3,5)]
B[,-c(1,2,4)] # ALTERNATIVE way
B[-1,-2]
diag(B)  # Extracts "diagonal of a matrix
B
# b.Dimensions of the matrix:
# --------------------------
dim(B)
nrow(B)
ncol(B)
dim(B)[2]
# c.cfr. names(vector):
# ---------------------
rownames(B) <- c("r1","r2")
colnames(B) <- c("c1","c2","c3","c4","c5")
B
B["r2",c("c3","c4")]
# d. Convert vector to matrix:
# ---------------------------
M <- matrix(1:15,nrow=5,byrow=TRUE)
M
class(M)
attributes(M)
N <- 1:3
N
class(N)
attributes(N)
class(as.matrix(N))
attributes(as.matrix(N))
# Vector multiplication
M
M %*% as.matrix(N)
# d.Special matrices:
# ------------------
B <- matrix(1:25,nrow=5)
B
diag(B) <- rep(0,5)
B
# e.Unit matrix (5x5):
# -------------------
C <- diag(5)
C
# C.Linear Algebra:
# ----------------
M
mean(M)
colMeans(M)
rowMeans(M)
# Transpose
t(M)
# Default El-WISE operation (cfr. numpy python)
A <- matrix(1:9,nrow=3)
B <- matrix(1:9,nrow=3)
A
B
B <- B + 10
B
# Inversion
A    <- matrix(data=c(3,4,1,2),nrow=2,ncol=2)
A
Ainv <- solve(A)
Ainv
A%*%Ainv
# Eigenvalue
r <- eigen(A)
r
# Eigenvalues
r$values
# Matrix with eigenvectors
r$vectors
# Diagonal Matrix (Similarity Transformation)
solve(r$vectors) %*% A %*% r$vectors
Arr <- array(1:24,dim=c(2,3,4))
Arr
dim(Arr)
# Clean up variables from the env.
rm(list=ls())
# A.CREATION:
# ----------
# Can be done in several ways
aList <- list()  # Empty List
aList
class(aList)
bList <- list(1,2, 8:10,"hello","world")         # NO Names
bList
class(bList)
cList <- list(x=1,y=2,str1="hello",str2="world") # Using names -> Differerence in output (Strings)
cList
class(cList)
length(cList)
dList <- list(matrix(data=1:4,nrow=2,ncol=2),c(T,F,T,T),"hello")
dList
class(dList)
# B.ACCESSING individual elements:
# -------------------------------
# a.WITHOUT NAMES (ALWAYS working)  -> [[ ]]
# --------------------------------
for( i in 1:length(cList))
{
str = sprintf(" %s %s  %s \n",
cList[[i]], " type:-> ", class(cList[[i]]))
cat(str)
}
cat(" dList::")
dList
dList[[1]]
dList[[2]]
dList[[3]]
length(dList)
dList[[1]][,2]
dList[[2]][2]
dList[[3]] <- paste(dList[[3]],"people")
dList
# b.Using NAMES (IFF names are available):
# ----------------------------------------
cat(" x   : -> Type:'", class(cList$x),   "'  Value:",  cList$x)
cat(" y   : -> Type:'", class(cList$y),   "'  Value:",  cList$y)
cat(" str1: -> Type:'", class(cList$str1),"'  Value:",  cList$str1)
cat(" str2: -> Type:'", class(cList$str2),"'  Value:",  cList$str2)
# c.But you can always add NAMES to a list:
# ----------------------------------------
dList
names(dList) <- c("mymat","mybool","mystr")
dList$mymat
dList$mybool
dList$mystr
names(dList)
# NOTE:
# ----
# There is a FUNDAMENTAL difference between [] (slicing -> returns sublist)
# and [[ ]] -> returns value
for( i in 1:length(cList))
{
str1 = sprintf(" %s %s  %s \n",
cList[[i]], " type:-> ", class(cList[[i]]))
cat(str1)
str2 = sprintf(" %s %s  %s \n",
cList[i], " type:-> ", class(cList[i]))
cat(str2)
}
# or MAYBE MORE CONCRETE:
# ----------------------
dList
# [[ ]] : Extract Individual el.
dList[[c(2,3)]]
# Alternative approach:
myVal <- dList[[2]]
myVal
myVal[3]
# [ ] : Take a slice of the list -> list
dList[c(2,3)]
class(dList[c(2,3)])
# C.Add & delete individual list elements:
# ----------------------------------------
# a.Addition ::
cList
cList$var = "New value"
cList
# b.Using indices ::
cList[[6]] <- 13
length(cList)
cList
cList[[10]] <- 12
length(cList)
cList
# c.Deletion::
cList[[6]] <- NULL
cList
cList[6:9] <- NULL
cList
length(cList)
# D.Very useful WHEN returning more than 1 variable:
# --------------------------------------------------
trial <- function(n)
{
x <- n*(n+1)/2
y <- cbind(1:n,(1:n)^2)
list('x'=x,'y'=y)
}
n <- 8
res <- trial(n)
res$x
res$y
# Clean up variables from the env.
rm(list=ls())
# EXAMPLE 1:
# ---------
data1 <- sample(0:4,size=25,replace=TRUE) # Create a vector with rdn number [0,4]
data1
myfac1.data = factor(data1, labels=c("VeryLow","Low","Medium","High","VeryHigh"))
myfac1.data
levels(myfac1.data)
is.factor(data1)
is.factor(myfac1.data)
# EXAMPLE 2:
# ----------
temp.data <- c("High","Low","VeryHigh","Low","VeryLow","Medium",
"VeryHigh","VeryHigh","Low","Low","Medium","VeryHigh",
"VeryHigh","VeryHigh","Low","High","VeryLow")
temp.data
myfac.temp.data <- factor(temp.data)
myfac.temp.data
levels(myfac.temp.data)
# Example 1:
# ---------
mydata <- data.frame(person=c("Peter","Lois","Meg","Chris","Stewie"),
age=c(42,40,17,14,1),
sex=factor(c("M","F","F","M","M")))
# Example 1:
# ---------
mydata <- data.frame(person=c("Peter","Lois","Meg","Chris","Stewie"),
age=c(42,40,17,14,1),
sex=factor(c("M","F","F","M","M")))
mydata
# Extract parts of it:
# a.(using List Syntax)
mydata[[1]]
mydata[[2]]
mydata[[3]]
mydata[[2]][3]
# b.(using names)
mydata$person
mydata$age
mydate$sex
mydata$age[3]
# c.(using matrix syntax)
mydata[,1]
mydata[,2]
mydata[,3]
mydata[3,2]
nrow(mydata)
ncol(mydata)
dim(mydata)
# Note mydata[[1]] is of factor type
# Character strings automatically converted to factors
# -> to prevent use stringsAsFactors=False (Default=True)
mydata <- data.frame(person=c("Peter","Lois","Meg","Chris","Stewie"),
age=c(42,40,17,14,1),
sex=factor(c("M","F","F","M","M")),
stringsAsFactors=FALSE)
mydata
mydata[[1]]
mydata[[2]]
mydata[[3]]
# Adding data to existing set (rows & columns)
# A.New Record/Row (rbind 2 data frames)
newrec <- data.frame(person=c("John"),age=c(23),
sex=factor(c("M"),levels=levels(mydata$sex)),
stringsAsFactors=FALSE)
newrec
mydata <- rbind(mydata,newrec)
mydata
# B. Add a new column
funny <- factor(c("H","M","M","L","H","H"))
funny
mydata <- cbind(mydata,funny)
mydata
# or using matrix/names syntax
mydata[7,]=c("suzie",19,"F","H")
mydata
mydata$yedu= c(12,12,16,10,12,16,20)
mydata
# Global clean-up
rm(list=ls())
# R has a lot of built-in datasets (part of the R distribution)
data()
?airquality
names(airquality)
airquality[1:10,]
airquality$Ozone
# B. Reading external DataFiles
# Simple example
getwd()  # Working Directory
tt <- read.table(file="./DataFiles/seaice.txt",header=TRUE)
names(tt)
tt
# Linear Regression (quadratic curve)
x <- tt$Year
x2 <- x^2
y <- tt$Ice
f1 <- lm(formula = y ~ x + x2)
summary(f1)
anova(f1)
xarr  <- seq(from=min(x),to=max(x),by=0.05)
beta0 <- f1$coefficients[1]
beta1 <- f1$coefficients[2]
beta2 <- f1$coefficients[3]
yarr  <- beta0 + beta1*xarr + beta2 *xarr^2
plot(x,y,main="Extent Artic Sea Ice in month of September")
lines(xarr,yarr,lty=3,col="red",lwd=2)
# Simple Write-out Example
my.state <- c("AL","AK","AZ","AR","CA","CO")
my.year <- c(1819,1959,1912,1836,1859,1876)
mydf <- data.frame(state=my.state,year=my.year,stringsAsFactors = FALSE)
mydf
getwd()
write.table(mydf,"./DataFiles/state.txt",row.names=FALSE,col.names=TRUE,quote=TRUE)
tt <- read.table("./DataFiles/state.txt",header=TRUE,stringsAsFactors = FALSE)
tt
# Global clean up
rm(list=ls())
# Example 1:
# ---------
mysum1 <- function(x,y){
return(x+y)
}
mysum1(3,4)
# Example 2: Default arg.
# ----------
mysum2 <- function(x,y=5){
return(x+y)
}
mysum2(2)
mysum2(2,7)
# Exploit VECTORIZATION to speed-up code
# Simple For Loop
myfunc1 <- function(n, av=0., s=1.)
{
res <- rnorm(n,mean=av,sd=s)
tot <- 0.0
for(i in 1:n){
tot <- tot + res[i]*res[i]
}
return(tot)
}
# Vectorization
myfunc2 <- function(n, av=0., s=1.)
{
res <- rnorm(n,mean=av,sd=s)
tot <- sum(res^2)
return(tot)
}
# Compare timings func1 vs func2
arr <- c(10^4,10^5,10^6,10^7)
for( n in arr){
cat(sprintf(" N:%d\n",n)) # Functions do NOT print in an NON-INTERACTIVE mode
s1 <- system.time(myfunc1(n))
cat("    ", s1,"\n")
s2 <- system.time(myfunc2(n))
cat("    ", s2,"\n")
}
# Clean up
rm(list=ls())
# GLOBAL env.: contains user-defined objects
x <- 5
ls()   # list objects in curr. global env
y <- matrix(1:10, nrow=4, ncol=5)
ls()
y <- matrix(1:20, nrow=4, ncol=5)
ls()
rm("x")  # Remove x
# PACKAGE env.
#  package can have visible
#  and invisible functionality
#  (cfr. private & public variables in C++)
search()  # See visible packages
ls(".GlobalEnv")
ls("package:base")
search()
library(hermite)
install.packages("hermite")
search()
library(hermite)
search()
# search(hermite)
ls("package:hermite")
?phermite
# LOCAL ENV
# When a function is created a local env
# is created which disappears at the end of the function
z <- matrix(data=1:4,nrow=2,ncol=2)  # local env with data, nrow & ncol
# seq function
w <- seq(from=2, to=5, by=0.5)
environment(seq)
ls("package:base")  # contains seq
# Remove package from search()
search()
qhermite(p=0.7,a=1.,b=1.)
detach("package:hermite")  # Remove hermite package from search path
search()
# Attach: Add Objects to search path
wcapital <- list(UT='Salt Lake City',NV='Carson City',AZ='Phoenix',NM='Santa Fe')
wcapital$UT
wcapital
ls(".GlobalEnv")
search()
attach(wcapital)
ls(".GlobalEnv")
search()
UT
detach(wcapital)
search()
UT
wcapital$UT
